datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  ORGANIZER
  MEMBER
}

enum EventStatus {
  DRAFT
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String
  role      UserRole  @default(MEMBER)
  createdAt DateTime  @default(now())

  // relations
  organizedEvents Event[]        @relation("OrganizerEvents")
  eventMembers    EventMember[]
  subgroupMembers SubgroupMember[]
  assignedTasks   Task[]         @relation("AssignedTasks")
  messages        Message[]
  expenses        Expense[]      @relation("SubmittedExpenses")
  documents       Document[]     @relation("UploadedDocuments")
}

model Event {
  id         String    @id @default(uuid())
  organizerId String
  name       String
  type       String
  eventDate  DateTime?
  venue      String
  status     EventStatus @default(SCHEDULED)
  createdAt  DateTime   @default(now())

  // relations
  organizer   User       @relation("OrganizerEvents", fields: [organizerId], references: [id], onDelete: Cascade)
  channels    Channel[]
  eventMembers EventMember[]
  budgets     Budget[]
  documents   Document[]
}

model EventMember {
  id        String   @id @default(uuid())
  eventId   String
  userId    String
  role      String
  joinedAt  DateTime @default(now())

  // relations
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Channel {
  id         String    @id @default(uuid())
  eventId    String
  name       String
  description String?
  createdAt  DateTime  @default(now())

  // relations
  event      Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  subgroups  Subgroup[]
  tasks      Task[]
  messages   Message[]
  documents  Document[]
}

model Subgroup {
  id          String    @id @default(uuid())
  channelId   String
  name        String
  description String?

  // relations
  channel       Channel         @relation(fields: [channelId], references: [id], onDelete: Cascade)
  subgroupMembers SubgroupMember[]
  tasks         Task[]
}

model SubgroupMember {
  id         String @id @default(uuid())
  subgroupId String
  userId     String
  role       String

  subgroup   Subgroup @relation(fields: [subgroupId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id          String       @id @default(uuid())
  channelId   String?
  subgroupId  String?
  assignedTo  String?
  title       String
  description String?
  status      TaskStatus   @default(OPEN)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime     @default(now())

  // relations
  channel   Channel?  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  subgroup  Subgroup? @relation(fields: [subgroupId], references: [id], onDelete: Cascade)
  assignee  User?     @relation("AssignedTasks", fields: [assignedTo], references: [id], onDelete: SetNull)
}

model Message {
  id        String   @id @default(uuid())
  channelId String
  userId    String
  content   String
  createdAt DateTime @default(now())

  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Budget {
  id          String   @id @default(uuid())
  eventId     String
  totalAmount Decimal  @db.Decimal(10, 2)
  spentAmount Decimal  @db.Decimal(10, 2) @default("0.00")

  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  expenses   Expense[]
}

model Expense {
  id          String   @id @default(uuid())
  budgetId    String
  submittedBy String?
  itemName    String
  amount      Decimal  @db.Decimal(10, 2)
  expenseDate DateTime?
  status      ExpenseStatus @default(PENDING)
  createdAt   DateTime @default(now())

  budget   Budget @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  submitter User? @relation("SubmittedExpenses", fields: [submittedBy], references: [id], onDelete: SetNull)
}

model Document {
  id         String   @id @default(uuid())
  eventId    String?
  channelId  String?
  uploadedBy String?
  fileName   String
  fileUrl    String
  createdAt  DateTime @default(now())

  event   Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  channel Channel? @relation(fields: [channelId], references: [id], onDelete: Cascade)
  uploader User?   @relation("UploadedDocuments", fields: [uploadedBy], references: [id], onDelete: SetNull)
}